package com.mycompany.smarteduapp;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.time.format.DateTimeFormatter;
import java.time.*;
import javax.swing.*;
import java.util.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ethan
 */
public class DetailsScreen extends javax.swing.JFrame {
    ArrayList<JRadioButton> statusList;
    AddNoteScreen newNote;
    String course,title,dateTime,status;
    int delay;
    DefaultTableModel model;

    /**
     * Creates new form DetailsScreen
     */
    public DetailsScreen() {
        initComponents();
        
        newNote = new AddNoteScreen();
        
        // Add radio buttons to array list to loop through.
        statusList = new ArrayList<>();
        statusList.add(pendingStatus);
        statusList.add(reviewStatus);
        statusList.add(finalStatus);
        
        model = (DefaultTableModel) noteTable.getModel();
  
    }
    
    // Load all saved notes from the DB.
    public void loadNotes() {
        // Load notes.
            
        model.setRowCount(0);
        
        // SQL Declarations
        Connection conn = null;
        Statement findNoteState = null;
        ResultSet rs = null;
       
        try {
            // Connect to user database.
            String url = "jdbc:mariadb://localhost:3307/academicdb";
            conn = DriverManager.getConnection(url,"root","");

            // Query to get all locally saved drawings.
            String findNotes = "select * from notes where course='"+course+"' and title='"+title+"' and dateTime='"+dateTime+"' order by 'id' asc";

            findNoteState = conn.createStatement();

            rs = findNoteState.executeQuery(findNotes);

            while (rs.next()) {
                String dateCreated,note;
                
                dateCreated = rs.getString("dateCreated");
                note = rs.getString("note");
                
                model.addRow(new Object[]{dateCreated,note});
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            // Close SQL connection.
            if (rs != null) try { rs.close(); } catch (Exception e2) {}
            if (findNoteState != null) try { findNoteState.close(); } catch (Exception e3) {}
            if (conn != null) try { conn.close(); } catch (Exception e4) {}
        }
    }
    
    // Create a new note and save it in the DB.
    public void noteCreated(String note) {
        Connection conn = null;
        Statement state = null;
        ResultSet rs = null;
        String url = "jdbc:mariadb://localhost:3307/academicdb";
        int current = 0;
        
        // Get next ID.
        try {
            conn = DriverManager.getConnection(url,"root","");
            
            String nextID = "select max(id) as currID from notes where course='"+course+"' and title='"+title+"' and dateTime='"+dateTime+"'";
            
            state = conn.createStatement();
            rs = state.executeQuery(nextID);
            
            if (rs.next()) {
                current = rs.getInt("currID");
            }
        } catch (Exception e) {
            System.out.println(e.toString());
        } finally {
            if (rs != null) try { rs.close(); } catch (Exception e2) {}
            if (state != null) try { state.close(); } catch (Exception e3) {}
            if (conn != null) try { conn.close(); } catch (Exception e4) {}
        }
       
        DateTimeFormatter form = DateTimeFormatter.ofPattern("MM/dd/yyyy HH:mm");
        String currTime = form.format(LocalDateTime.now());
        
        // Save to DB.
        try {
            conn = DriverManager.getConnection(url,"root","");

            String insertQuery = "insert into notes values ('"+course+"','"+title+"','"+dateTime+"',"+(current+1)+",'"+currTime+"','"+note+"')";

            state = conn.createStatement();
            state.executeQuery(insertQuery);
        } catch (Exception e) {

        } finally {
            if (state != null) try { state.close(); } catch (Exception e2) {}
            if (conn != null) try { conn.close(); } catch (Exception e3) {}
        }
        
        model.addRow(new Object[]{currTime,note});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusGroup = new javax.swing.ButtonGroup();
        assignTitleField = new javax.swing.JTextField();
        confirmButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        assignTitle = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        pendingStatus = new javax.swing.JRadioButton();
        reviewStatus = new javax.swing.JRadioButton();
        finalStatus = new javax.swing.JRadioButton();
        delayField = new javax.swing.JTextField();
        addNoteButton = new javax.swing.JButton();
        deleteNoteButton = new javax.swing.JButton();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        noteTable = new javax.swing.JTable();

        confirmButton2.setBackground(new java.awt.Color(34, 116, 165));
        confirmButton2.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 18)); // NOI18N
        confirmButton2.setForeground(new java.awt.Color(255, 255, 255));
        confirmButton2.setText("Confirm");
        confirmButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButton2ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(241, 196, 15));

        assignTitle.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 24)); // NOI18N
        assignTitle.setForeground(new java.awt.Color(255, 255, 255));
        assignTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        assignTitle.setText("Assignment: ");

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("- Status -");

        jLabel3.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("- Delay -");

        jPanel2.setBackground(new java.awt.Color(241, 196, 15));
        jPanel2.setOpaque(false);

        pendingStatus.setBackground(new java.awt.Color(241, 196, 15));
        statusGroup.add(pendingStatus);
        pendingStatus.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 1, 24)); // NOI18N
        pendingStatus.setForeground(new java.awt.Color(255, 255, 255));
        pendingStatus.setText("PENDING");

        reviewStatus.setBackground(new java.awt.Color(241, 196, 15));
        statusGroup.add(reviewStatus);
        reviewStatus.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 1, 24)); // NOI18N
        reviewStatus.setForeground(new java.awt.Color(255, 255, 255));
        reviewStatus.setText("REVIEW");

        finalStatus.setBackground(new java.awt.Color(241, 196, 15));
        statusGroup.add(finalStatus);
        finalStatus.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 1, 24)); // NOI18N
        finalStatus.setForeground(new java.awt.Color(255, 255, 255));
        finalStatus.setText("FINAL");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reviewStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(pendingStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finalStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pendingStatus)
                    .addComponent(finalStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reviewStatus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        delayField.setText("0");

        addNoteButton.setBackground(new java.awt.Color(34, 116, 165));
        addNoteButton.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 18)); // NOI18N
        addNoteButton.setForeground(new java.awt.Color(255, 255, 255));
        addNoteButton.setText("Add Note");
        addNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoteButtonActionPerformed(evt);
            }
        });

        deleteNoteButton.setBackground(new java.awt.Color(34, 116, 165));
        deleteNoteButton.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 18)); // NOI18N
        deleteNoteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteNoteButton.setText("Delete");
        deleteNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteNoteButtonActionPerformed(evt);
            }
        });

        confirmButton.setBackground(new java.awt.Color(34, 116, 165));
        confirmButton.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 18)); // NOI18N
        confirmButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(34, 116, 165));
        cancelButton.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 0, 18)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        noteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Notes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(noteTable);

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(assignTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addNoteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteNoteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delayField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(assignTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNoteButton)
                    .addComponent(deleteNoteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delayField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Add note button pressed.
    private void addNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoteButtonActionPerformed
        if (newNote.myScreen == null) {
            newNote.myScreen = this;
        }
        newNote.note.setText("");
        // Open new note window.
        newNote.setVisible(true);
    }//GEN-LAST:event_addNoteButtonActionPerformed

    // Delete note button pressed.
    private void deleteNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteNoteButtonActionPerformed
        // TODO add your handling code here:
        int row = noteTable.getSelectedRow();
        
        String noteDate,noteText;
        noteDate = model.getValueAt(row, 0).toString();
        noteText = model.getValueAt(row, 1).toString();
        
        // Delete from DB.
        Connection conn = null;
        Statement state = null;
        try {
            String url = "jdbc:mariadb://localhost:3307/academicdb";
            conn = DriverManager.getConnection(url,"root","");

            String deleteQuery = "delete from notes where course='"+course+"' and title='"+title+"' and dateTime='"+dateTime+"' and dateCreated='"+noteDate+"' and note='"+noteText+"'";

            state = conn.createStatement();
            state.executeQuery(deleteQuery);
        } catch (Exception e) {

        } finally {
            if (state != null) try { state.close(); } catch (Exception e2) {}
            if (conn != null) try { conn.close(); } catch (Exception e3) {}
        }
        
        // Delete row if one is selected.
        if (noteTable.getSelectedRow() != -1) {
            model.removeRow(noteTable.getSelectedRow());
        }
    }//GEN-LAST:event_deleteNoteButtonActionPerformed

    private void confirmButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButton2ActionPerformed
        
    }//GEN-LAST:event_confirmButton2ActionPerformed

    // Confirm button pressed.
    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        String newStatus = null;
        int newDelay;
        Connection conn = null;
        Statement state = null;
        String url = "jdbc:mariadb://localhost:3307/academicdb";
        
        // Loop through radio buttons to identify which is selected.
        for (JRadioButton button : statusList) {
            if (button.isSelected()) {
                newStatus = button.getText();
            }
        }
        
        newDelay = Integer.valueOf(delayField.getText());
        
        // If either the status or delay field changes, save this to the DB.
        if (!(newStatus == status) || !(newDelay == delay)) {
            try {
                conn = DriverManager.getConnection(url,"root","");

                String updateQuery = "update assignments set status='"+newStatus+"',delay="+newDelay+" where course='"+course+"' and title='"+title+"' and dateTime='"+dateTime+"'";

                state = conn.createStatement();
                state.executeQuery(updateQuery);
            } catch (Exception e) {
                System.out.println(e.toString());
            } finally {
                if (state != null) try { state.close(); } catch (Exception e2) {}
                if (conn != null) try { conn.close(); } catch (Exception e3) {}
            }
        }
        
        this.setVisible(false);
    }//GEN-LAST:event_confirmButtonActionPerformed

    // Cancel button pressed.
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DetailsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DetailsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DetailsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DetailsScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DetailsScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNoteButton;
    public javax.swing.JLabel assignTitle;
    private javax.swing.JTextField assignTitleField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JButton confirmButton2;
    public javax.swing.JTextField delayField;
    private javax.swing.JButton deleteNoteButton;
    private javax.swing.JRadioButton finalStatus;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable noteTable;
    private javax.swing.JRadioButton pendingStatus;
    private javax.swing.JRadioButton reviewStatus;
    private javax.swing.ButtonGroup statusGroup;
    // End of variables declaration//GEN-END:variables
}
